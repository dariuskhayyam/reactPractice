{"version":3,"sources":["components/TodoItem.js","components/todo.js","components/layout/header.js","components/Submit.js","components/pages/about.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","backgroundColor","display","padding","textAlign","alignItems","justifyContent","border","textDecoration","props","todo","completed","this","id","title","style","type","onChange","markComplete","bind","btnStyle","onClick","delTodo","Component","borderRadius","color","Todos","todos","map","key","React","hdStyle","margin","navStyle","alignContent","fontSize","navelStyle","Header","to","Submit","state","Title","e","setState","target","name","value","onSubmit","preventDefault","txtStyle","placeholder","subStyle","width","height","About","Fragment","App","filter","console","log","newTodo","uuid","v4","className","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2b6acc06.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport propTypes from 'prop-types';\r\n\r\nexport class TodoItem extends Component {\r\n\r\n\r\n        getStyle = () =>{\r\n           \r\n            return {\r\n                backgroundColor: '#f5f5f5',\r\n                display: 'flex',\r\n                padding: '10px',\r\n                textAlign: 'center',\r\n                alignItems:'center',\r\n                justifyContent: 'center',\r\n                border: '1px #000 solid',\r\n                textDecoration: this.props.todo.completed ? 'line-through' : 'none'\r\n            }\r\n        }\r\n            render() {\r\n                const {id, title} = this.props.todo;  \r\n                return (\r\n                    <div style={this.getStyle()}>\r\n                    <input type=\"checkbox\" onChange={this.props.markComplete.bind(this, id)}/> {' '}\r\n                    <h3>{title}</h3>  \r\n                    <button style={btnStyle} onClick={this.props.delTodo.bind(this, id)}>x</button>\r\n                    </div>\r\n                )\r\n            }\r\n     }\r\n\r\n//prop types\r\nTodoItem.propTypes = {\r\n    todo: propTypes.object.isRequired\r\n}\r\n\r\nconst btnStyle = {\r\n    backgroundColor: 'red',\r\n    borderRadius: '50%',\r\n    color: 'white'\r\n}\r\n\r\n\r\n\r\nexport default TodoItem\r\n","import React from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport propTypes from 'prop-types';\r\n\r\n\r\nclass Todos extends React.Component {\r\n\r\n\r\n\r\n  render(){\r\n    return this.props.todos.map((todo) => (\r\n      <TodoItem todo={todo} key={todo.id} markComplete={this.props.markComplete} delTodo = {this.props.delTodo}/>\r\n    ))\r\n\r\n  }\r\n}\r\n\r\n//prop types\r\nTodos.propTypes = {\r\n  todos: propTypes.array.isRequired\r\n}\r\n\r\nexport default Todos;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst hdStyle =  {\r\n        display:'flex',\r\n        padding:'2rem',\r\n        backgroundColor:'#a9a9a9',\r\n        margin:'0px',\r\n        justifyContent:'center'\r\n        \r\n    \r\n}\r\n\r\nconst navStyle ={\r\n    display:'flex',\r\n    padding:'2rem',\r\n    backgroundColor:'#a9a9a9',\r\n    \r\n    justifyContent:'center' ,\r\n    alignContent:'flex-end',\r\n    fontSize:'1.3em'\r\n}\r\n\r\nlet navelStyle ={\r\n    padding:'0px 0.5em',\r\n    textDecoration:'none',\r\n    color:'black',\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n function Header() {\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <header >\r\n                <h1 style={hdStyle}> ToDo List!</h1>\r\n                \r\n               <nav style={navStyle}> <Link to=\"/\" style={navelStyle} >Home  </Link> | <Link to=\"/about\" style={navelStyle}>   About </Link> </nav>\r\n            </header>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react'\r\n\r\nexport class Submit extends Component {\r\n\r\n    state = {\r\n        Title:'',\r\n    }\r\n\r\n    onChange = (e) =>{\r\n            this.setState({[e.target.name] : e.target.value});\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.Submit(this.state.Title);\r\n        this.setState({Title: ''});\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input name='Title' value={this.state.Title} style={txtStyle} type='text' placeholder=\"enter something you need to do...\" onChange={this.onChange}></input>   \r\n                <input type='submit' style={subStyle} onClick={this.onSubmit}></input>   \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst txtStyle = {\r\n    width:'20rem',\r\n    height:'2rem',\r\n    border:'2px black solid',\r\n}\r\n\r\nconst subStyle = {\r\n    width:'10rem',\r\n    height:'2.4rem',\r\n    border:'2px black solid'\r\n}\r\n\r\nexport default Submit\r\n","import React from 'react'\r\n\r\n function About() {\r\n    return (\r\n        <React.Fragment>\r\n            <h1>About</h1><br/>\r\n            <par>This is the ToDo list app</par>\r\n\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default About;\r\n","import React from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\nimport Todos from './components/todo';\nimport Header from './components/layout/header';\nimport Submit from './components/Submit';\nimport uuid from 'uuid';\nimport About from './components/pages/about';\n\n\n\nclass App extends React.Component {\n  state = {\n    todos: [\n\n    ]\n  }\n\n  delTodo = (id) =>{\n    this.setState({todos:[...this.state.todos.filter(todos => todos.id !== id)]});\n    console.log(id);\n  }\n\n  markComplete = (id) =>{\n      this.setState ({todos: this.state.todos.map(todo => {\n        if (todo.id === id){\n          todo.completed = !todo.completed;\n        }\n        return todo;\n      })});\n  }\n\n  Submit = (title) =>{\n    const newTodo = {\n      id: uuid.v4(),\n      title,\n      completed: false\n    }\n    this.setState({todos: [...this.state.todos, newTodo]});\n  }\n\n  \n\n  render(){\n    return (\n      <Router>\n      <div className=\"App\">\n        <Header/>\n        <Route exact path=\"/\" render={props => (\n          <React.Fragment>\n            <Submit Submit={this.Submit}/>\n            <Todos todos={this.state.todos} markComplete={this.markComplete} delTodo={this.delTodo}/>\n          </React.Fragment>\n        \n        )}/>\n\n        <Route path=\"/about\" component={About}/>\n\n      </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}